<project xmlns="http://maven.apache.org/POM/4.0.0" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
         xsi:schemaLocation="http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd">
    <parent>
        <artifactId>uim-application</artifactId>
        <groupId>org.dows.cloud</groupId>
        <version>20220701-SNAPSHOT</version>
    </parent>
    <modelVersion>4.0.0</modelVersion>
    <artifactId>uim-application-admin</artifactId>


    <dependencies>
       <dependency>
            <groupId>org.dows.cloud</groupId>
            <artifactId>account-rest-admin</artifactId>
        </dependency>

        <dependency>
            <groupId>org.dows.cloud</groupId>
            <artifactId>rbac-rest-admin</artifactId>
        </dependency>
        <!--
        <dependency>
            <groupId>org.dows.cloud</groupId>
            <artifactId>user-rest-admin</artifactId>
        </dependency>-->

        <dependency>
            <groupId>org.dows.cloud</groupId>
            <artifactId>uim-config</artifactId>
            <version>20220701-SNAPSHOT</version>
        </dependency>

    </dependencies>

    <build>
        <plugins>
            <plugin>
                <groupId>org.springframework.boot</groupId>
                <artifactId>spring-boot-maven-plugin</artifactId>
                <version>2.7.4</version>
                <executions>
                    <execution>
                        <goals>
                            <goal>repackage</goal>
                        </goals>
                    </execution>
                </executions>

                <configuration>
                    <includeSystemScope>true</includeSystemScope>
                    <mainClass>org.dows.uim.admin.UimAdminApplication</mainClass>
                    <!--<image>
                        <name>192.168.2.20/dows/${project.artifactId}</name>
                        &lt;!&ndash; 执行完build 自动push &ndash;&gt;
                        <publish>true</publish>
                    </image>
                    &lt;!&ndash;配置构建宿主机信息，本机不用配置&ndash;&gt;
                    <docker>
                        <host>http://192.168.2.10:2375</host>
                        <tlsVerify>false</tlsVerify>
                        <publishRegistry>
                            <username>username</username>
                            <password>password</password>
                            <url>192.168.2.20</url>
                        </publishRegistry>
                    </docker>-->
                </configuration>
            </plugin>

            <plugin>
                <groupId>io.fabric8</groupId>
                <artifactId>fabric8-maven-plugin</artifactId>
                <version>4.4.2</version>
                <executions>
                    <execution>
                        <goals>
                            <goal>resource</goal>
                            <goal>build</goal>
                        </goals>
                    </execution>
                </executions>
                <configuration>
                    <dockerHost>http://localhost:2375</dockerHost>
                    <verbose>true</verbose>
                    <registry>https://hub.docker.com/repository/docker/laitzhang/dows</registry>
                    <!--                    <pushRegistry>https://hub.docker.com/repository/docker/laitzhang/dows</pushRegistry>-->
                    <images>
                        <image>
                            <name>${project.artifactId}:${project.version}</name>
                            <build>
                                <!--<dockerFileDir>${basedir}</dockerFileDir>-->
                                <!--<from>java:11</from>-->
                                <ports>
                                    <port>8080</port>
                                </ports>
                                <entryPoint>
                                    <exec>
                                        <arg>java</arg>
                                        <arg>-jar</arg>
                                        <arg>/work/${project.build.finalName}.jar</arg>
                                    </exec>
                                </entryPoint>
                                <assembly>
                                    <descriptorRef>artifact</descriptorRef>
                                    <targetDir>/work</targetDir>
                                    <inline>
                                        <files>
                                            <file>
                                                <source>${project.build.directory}/${project.build.finalName}.jar</source>
                                            </file>
                                        </files>
                                    </inline>
                                </assembly>

                            </build>
                        </image>
                    </images>
                </configuration>
            </plugin>


            <!--<plugin>
                <groupId>io.fabric8</groupId>
                <artifactId>docker-maven-plugin</artifactId>
                <version>0.40.2</version>
                &lt;!&ndash;全局配置&ndash;&gt;
                <configuration>
                    &lt;!&ndash;这一部分是为了实现对远程docker容器的控制&ndash;&gt;
                    &lt;!&ndash;docker主机地址,用于完成docker各项功能,注意是tcp不是http 有的这样配置:<dockerHost>tcp://公网IP:2376</dockerHost>!&ndash;&gt;
                    <dockerHost>http://localhost:2375</dockerHost>
                    <serverId>docker.io</serverId>

                    &lt;!&ndash;docker远程访问所需证书地址,如果docker远程主机没有启用TLS验证则不需要配证书&ndash;&gt;
                    &lt;!&ndash;<certPath>${project.basedir}/docker/ssh</certPath>&ndash;&gt;
                    &lt;!&ndash;这一部分是为了实现docker镜像的构建和推送&ndash;&gt;
                    &lt;!&ndash;registry地址,用于推送,拉取镜像,这里可以用阿里的registry&ndash;&gt;
                    &lt;!&ndash;<registry>registry.cn-shenzhen.aliyuncs.com</registry>&ndash;&gt;
                    &lt;!&ndash;认证配置,用于私有registry认证,如果忘记了可以去阿里的registry查看&ndash;&gt;
                    &lt;!&ndash;<authConfig>
                        <push>
                            <username>laitzhang</username>
                            <password>dockerhubz123456</password>
                        </push>
                    </authConfig>&ndash;&gt;

                    &lt;!&ndash;镜像相关配置,支持多镜像&ndash;&gt;
                    <images>
                        &lt;!&ndash; 单个镜像配置 &ndash;&gt;
                        <image>
                            &lt;!&ndash;镜像名(含版本号) 命名空间/仓库名称:镜像版本号&ndash;&gt;
                            <name>dows/${project.artifactId}:${project.version}</name>
                            &lt;!&ndash;别名:用于容器命名和在docker-compose.yml文件只能找到对应名字的配置&ndash;&gt;
                            <alias>${project.artifactId}</alias>
                            &lt;!&ndash;镜像build相关配置&ndash;&gt;
                            <build>
                                &lt;!&ndash;使用dockerFile文件&ndash;&gt;
                                &lt;!&ndash;<dockerFile>${project.basedir}/docker/${project.name}</dockerFile>&ndash;&gt;
                                <dockerFileDir>${basedir}</dockerFileDir>
                                <assembly>
                                    <descriptorRef>artifact</descriptorRef>
                                </assembly>
                                <tags>
                                    <tag>${project.version}</tag>
                                </tags>
                            </build>
                            &lt;!&ndash;配置docker-compose文件&ndash;&gt;
                            &lt;!&ndash;<external>
                                <type>compose</type>
                                <basedir>${project.basedir}/docker</basedir>
                                <composeFile>docker-compose.yml</composeFile>
                            </external>&ndash;&gt;
                            &lt;!&ndash;容器run相关配置&ndash;&gt;
                            <run>
                                &lt;!&ndash;配置运行时容器命名策略为:别名,如果不指定则默认为none,即使用随机分配名称&ndash;&gt;
                                <namingStrategy>alias</namingStrategy>
                            </run>
                        </image>
                    </images>
                </configuration>
            </plugin>-->
        </plugins>
        <finalName>admin</finalName>
    </build>
</project>
